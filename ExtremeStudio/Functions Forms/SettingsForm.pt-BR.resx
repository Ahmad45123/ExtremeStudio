<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="TabPage1.Text" xml:space="preserve">
    <value>Tema e cores</value>
  </data>
  <data name="TabPage2.Text" xml:space="preserve">
    <value>Compilador</value>
  </data>
  <data name="ResetLangBtn.Text" xml:space="preserve">
    <value>Redefinir as configurações de localização</value>
  </data>
  <data name="resetBtn.Text" xml:space="preserve">
    <value>Redefinir para o padrão</value>
  </data>
  <data name="importBtn.Text" xml:space="preserve">
    <value>Importar</value>
  </data>
  <data name="exportBtn.Text" xml:space="preserve">
    <value>Exportar</value>
  </data>
  <data name="Button1.Text" xml:space="preserve">
    <value>Redefinir para o padrão</value>
  </data>
  <data name="customArgsText.ToolTip" xml:space="preserve">
    <value>Se houver alguns argumentos que você deseja compilar junto, que não estão acima, escreva-os aqui.</value>
  </data>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="Label9.Size" type="System.Drawing.Size, System.Drawing">
    <value>173, 13</value>
  </data>
  <data name="Label9.Text" xml:space="preserve">
    <value>Argumentos extras personalizados: </value>
  </data>
  <data name="parenthesesCheck.Size" type="System.Drawing.Size, System.Drawing">
    <value>185, 17</value>
  </data>
  <data name="parenthesesCheck.Text" xml:space="preserve">
    <value>Funções precisam de parênteses.</value>
  </data>
  <data name="parenthesesCheck.ToolTip" xml:space="preserve">
    <value>Se marcada, os parâmetros passados em um função devem estar entre parênteses.</value>
  </data>
  <data name="semiColonCheck.Size" type="System.Drawing.Size, System.Drawing">
    <value>233, 17</value>
  </data>
  <data name="semiColonCheck.Text" xml:space="preserve">
    <value>Linhas devem terminar com ponto e vírgula.</value>
  </data>
  <data name="semiColonCheck.ToolTip" xml:space="preserve">
    <value>Se marcada, as linhas devem terminar com ponto e vírgula.</value>
  </data>
  <data name="skipLinesUpDown.Location" type="System.Drawing.Point, System.Drawing">
    <value>153, 195</value>
  </data>
  <data name="skipLinesUpDown.Size" type="System.Drawing.Size, System.Drawing">
    <value>198, 20</value>
  </data>
  <data name="skipLinesUpDown.ToolTip" xml:space="preserve">
    <value>Numero a ignorar: o numero de linhas a serem ignoradas no arquivo de entrada antes do começo da compilação; 
por exemplo, para ignorar um "cabeçalho" no arquivo de origem que não é uma sintaxe pawn válida.</value>
  </data>
  <data name="Label8.Size" type="System.Drawing.Size, System.Drawing">
    <value>139, 13</value>
  </data>
  <data name="Label8.Text" xml:space="preserve">
    <value>Número de linhas a ignorar: </value>
  </data>
  <data name="tabSizeUpDown.Location" type="System.Drawing.Point, System.Drawing">
    <value>107, 169</value>
  </data>
  <data name="tabSizeUpDown.Size" type="System.Drawing.Size, System.Drawing">
    <value>244, 20</value>
  </data>
  <data name="tabSizeUpDown.ToolTip" xml:space="preserve">
    <value>Tamanho do Tab: o numero de caracteres de espaços a ser usado como um caractere de tab. 
Sem esta opção, o analisador de pawn irá detectar automaticamente o tab.</value>
  </data>
  <data name="Label7.Size" type="System.Drawing.Size, System.Drawing">
    <value>95, 13</value>
  </data>
  <data name="Label7.Text" xml:space="preserve">
    <value>Tamanho do Tab: </value>
  </data>
  <data name="optiLevelUpDown.Location" type="System.Drawing.Point, System.Drawing">
    <value>122, 143</value>
  </data>
  <data name="optiLevelUpDown.Size" type="System.Drawing.Size, System.Drawing">
    <value>229, 20</value>
  </data>
  <data name="optiLevelUpDown.ToolTip" xml:space="preserve">
    <value>Nível de otimização: 0 = sem otimização, 1 = apenas instruções fundamentais, 
2 = instruções fundamentais e suplementares. 
Otimização nível 1 é compatível com implementações JIT
(JIT = compilador “Just In Time”, uma máquina abstrata de alto desempenho).</value>
  </data>
  <data name="Label5.Size" type="System.Drawing.Size, System.Drawing">
    <value>107, 13</value>
  </data>
  <data name="Label5.Text" xml:space="preserve">
    <value>Nível de otimização: </value>
  </data>
  <data name="debugLevelUpDown.Location" type="System.Drawing.Point, System.Drawing">
    <value>122, 117</value>
  </data>
  <data name="debugLevelUpDown.Size" type="System.Drawing.Size, System.Drawing">
    <value>229, 20</value>
  </data>
  <data name="debugLevelUpDown.ToolTip" xml:space="preserve">
    <value>Nível de depuração: 0 = nenhum, 1 = apenas verificação de limites e afirmações, 
2 = informação simbólica completa, 3 = informação simbólica completa e
otimizações desativadas (o mesmo que a combinação de -d2 e -O0).</value>
  </data>
  <data name="Label4.Size" type="System.Drawing.Size, System.Drawing">
    <value>108, 13</value>
  </data>
  <data name="Label4.Text" xml:space="preserve">
    <value>Nível de depuração: </value>
  </data>
  <data name="reportGenDirText.Location" type="System.Drawing.Point, System.Drawing">
    <value>141, 91</value>
  </data>
  <data name="reportGenDirText.Size" type="System.Drawing.Size, System.Drawing">
    <value>210, 20</value>
  </data>
  <data name="reportGenDirText.ToolTip" xml:space="preserve">
    <value>Relatório: ativa a criação do relatório e opcionalmente define
o nome do arquivo no qual a documentação extraída e 
o relatório de referencia cruzada serão escritos.

Defina o caminho como padrão para criar o relatório no diretório de saída.</value>
  </data>
  <data name="reportGenCheck.Location" type="System.Drawing.Point, System.Drawing">
    <value>122, 94</value>
  </data>
  <data name="Label6.Size" type="System.Drawing.Size, System.Drawing">
    <value>114, 13</value>
  </data>
  <data name="Label6.Text" xml:space="preserve">
    <value>Geração de relatórios: </value>
  </data>
  <data name="ouputDirText.Location" type="System.Drawing.Point, System.Drawing">
    <value>107, 62</value>
  </data>
  <data name="ouputDirText.Size" type="System.Drawing.Size, System.Drawing">
    <value>244, 20</value>
  </data>
  <data name="ouputDirText.ToolTip" xml:space="preserve">
    <value>Arquivo de saída: defina o nome e caminho do arquivo binário de saída.

Defina como null para usar o padrão.</value>
  </data>
  <data name="Label3.Size" type="System.Drawing.Size, System.Drawing">
    <value>97, 13</value>
  </data>
  <data name="Label3.Text" xml:space="preserve">
    <value>Diretório de saída: </value>
  </data>
  <data name="includesDirText.Location" type="System.Drawing.Point, System.Drawing">
    <value>128, 36</value>
  </data>
  <data name="includesDirText.Size" type="System.Drawing.Size, System.Drawing">
    <value>223, 20</value>
  </data>
  <data name="includesDirText.ToolTip" xml:space="preserve">
    <value>Caminho das includes: defina o caminho onde o compilador
pode encontrar os arquivos das includes.

Defina como null para usar o padrão.</value>
  </data>
  <data name="Label2.Size" type="System.Drawing.Size, System.Drawing">
    <value>114, 13</value>
  </data>
  <data name="Label2.Text" xml:space="preserve">
    <value>Diretório das includes: </value>
  </data>
  <data name="activeDirText.Location" type="System.Drawing.Point, System.Drawing">
    <value>92, 10</value>
  </data>
  <data name="activeDirText.Size" type="System.Drawing.Size, System.Drawing">
    <value>259, 20</value>
  </data>
  <data name="activeDirText.ToolTip" xml:space="preserve">
    <value>Diretório: o diretório "ativo", onde o compilador
deve procurar por seus arquivos de entrada e armazenar seus arquivos de saída.

Defina como null para usar o padrão.</value>
  </data>
  <data name="Label1.Size" type="System.Drawing.Size, System.Drawing">
    <value>78, 13</value>
  </data>
  <data name="Label1.Text" xml:space="preserve">
    <value>Diretório ativo: </value>
  </data>
  <data name="nameColumn.HeaderText" xml:space="preserve">
    <value>Nome</value>
  </data>
  <data name="valueColumn.HeaderText" xml:space="preserve">
    <value>Valor</value>
  </data>
  <data name="$this.Text" xml:space="preserve">
    <value>Configurações [Projeto]</value>
  </data>
</root>